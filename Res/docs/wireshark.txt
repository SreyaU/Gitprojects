1. Overview of Wireshark in WLAN Testing
Wireshark is a packet analyzer used to capture and analyze network traffic. For WLAN engineers, it helps in analyzing 802.11 frames, diagnosing connectivity issues, verifying QoS, roaming behavior, encryption, and troubleshooting performance.

2. Setup for WLAN Packet Capture
A. Capture Environment
Monitor Mode: Required to capture 802.11 headers (management, control, data).

Supported NICs:

Linux: Use airmon-ng to enable monitor mode.

Windows: Requires special drivers (e.g., AirPcap, Npcap in monitor mode).

Mac: Use built-in Wi-Fi card with Wireless Diagnostics.

B. Channel Selection
Filter to one channel at a time to avoid packet loss.

Use tools like iwconfig, airmon-ng, or WiFi Explorer to select the correct channel.

C. Promiscuous Mode
Ensures capture of all frames on the channel, not just to/from your host.

3. Packet Types in 802.11 WLAN
A. Management Frames
Beacon: SSID, supported rates, capabilities, BSSID.

Probe Request/Response: Used during active scanning.

Authentication/Association: Connection establishment sequence.

Deauthentication/Disassociation: Connection teardown.

B. Control Frames
RTS, CTS, ACK: Used for coordination.

C. Data Frames
Contain payload; may be encrypted.

Includes QoS data, Null function (for power saving), etc.

4. Key Wireshark Filters (Display Filters)
A. By Frame Type
wireshark
Copy
Edit
wlan.fc.type == 0         # Management
wlan.fc.type == 1         # Control
wlan.fc.type == 2         # Data
B. By Subtype
wireshark
Copy
Edit
wlan.fc.subtype == 8      # Beacon
wlan.fc.subtype == 5      # Probe Response
wlan.fc.subtype == 4      # Probe Request
wlan.fc.subtype == 0      # Association Request
wlan.fc.subtype == 1      # Association Response
C. By MAC Address
wireshark
Copy
Edit
wlan.addr == aa:bb:cc:dd:ee:ff
D. By SSID
wireshark
Copy
Edit
wlan.ssid == "TestSSID"
E. By Signal Strength (Radiotap)
wireshark
Copy
Edit
radiotap.dbm_antsignal
5. Common Analysis Scenarios
A. Connectivity Issue
Check association/authentication sequence.

Ensure proper handshake: Probe → Auth → Assoc.

B. Roaming
Trace frame exchanges when STA moves between APs.

Monitor reassociation request/response.

C. Interference / Retransmissions
Look for high retry counts.

wireshark
Copy
Edit
wlan.fc.retry == 1
D. Encryption Issues
Check for successful 4-way handshake.

Look for EAPOL frames.

wireshark
Copy
Edit
eapol
E. Power Saving
Null data frames from client indicate sleep state.

wireshark
Copy
Edit
wlan.fc.type_subtype == 0x24
6. Time-Based Analysis
Use “Time Display Format” to view delta times between frames.

Helpful for analyzing delays in roaming, association, or handshakes.

7. Save and Share
Use .pcapng format.

Anonymize captures using "Editcap" (CLI) or "Wireshark GUI" (Export Specified Packets).

8. CLI Tools (for Automation)
Tshark: Terminal-based version of Wireshark.

bash
Copy
Edit
tshark -i wlan0 -Y "wlan.fc.type==0" -w management_frames.pcapng
If you need targeted instruction (e.g., analyzing fast BSS transition (802.11r), WPA3 handshake, QoS analysis), I can provide step-by-step guidance. Let me know.









Ask ChatGPT
You said:
make a structured learning plan for 1 month with practice questions and scenarios , examples, outputs and explanation via which i'll master packet capture and analysis using wireshark


ChatGPT said:
Here is a 1-month structured learning plan to master WLAN packet capture and analysis using Wireshark, designed for an engineer-level focus. It includes theory, tools setup, capture techniques, protocol breakdowns, practical scenarios, sample outputs, and detailed explanations.

WEEK 1 – Setup, Interface Basics & Packet Types
Objective:
Understand 802.11 protocol structure

Install Wireshark and capture environment setup

Recognize basic frame types and structure

Topics:
Wireshark UI and settings

Enabling monitor mode (Linux/macOS)

802.11 frame architecture

Types: Management, Control, Data

Activities:
Install & Setup:

Install Wireshark and TShark

Enable monitor mode (airmon-ng start wlan0)

Lock on channel (iwconfig wlan0 channel 6)

Capture Practice:

Capture packets on home/office Wi-Fi

Use filter: wlan.fc.type == 0 → See management frames

Learn Frame Structure:

Open a Beacon frame

Check: SSID, Supported Rates, Capabilities, BSSID, TIM

Open a Probe Request

Check: SSID, source MAC

Practice Questions:
What is the difference between Beacon and Probe Response?

Which frame subtype corresponds to association requests?

How do you confirm if a packet is encrypted?

WEEK 2 – Association, Authentication, and EAPOL
Objective:
Analyze WLAN connection setup

Understand EAPOL handshake

Detect misconfigured encryption

Topics:
Active vs Passive scanning

Open System Auth vs WPA/WPA2/WPA3

4-Way Handshake (EAPOL)

RSN Information Element

Activities:
Connect a client to WLAN and capture the full sequence:

Filter: wlan.addr == <client_MAC>

Identify frames: Probe Req/Resp → Auth → Assoc → EAPOL

Examine RSN Element:

Key cipher suite, authentication method, PMF support

4-Way Handshake:

Filter: eapol

Identify M1–M4 messages

Confirm if handshake completes

Practice Scenarios:
Capture handshake and identify key management (PSK or 802.1X)

Detect failed handshake due to wrong key

Analyze AP configuration differences using RSN

WEEK 3 – Roaming, QoS, Retries, and Power Saving
Objective:
Understand mobility events

Learn about QoS, retries, and power-saving mechanisms

Topics:
Reassociation

Null function frames

WMM / QoS TID values

Retry bit, fragmentation

Activities:
Roaming Analysis:

Walk between two APs with same SSID (802.11r if supported)

Filter: wlan.fc.subtype == 10 (reassoc request)

Track BSSID change, RSSI trend

Retry and Fragmentation:

Filter: wlan.fc.retry == 1

Check sequence numbers

Power Save Mode:

Filter: wlan.fc.type_subtype == 0x24 (Null frame)

Observe traffic before/after

QoS Traffic:

Filter: wlan.qos.tid == 6 (Video)

Match with traffic type (YouTube, Zoom)

Practice Scenarios:
Verify client roam with minimal delay

Analyze packet loss due to retries

Check if video traffic uses proper QoS tag

WEEK 4 – Advanced Scenarios, Automation, and Reporting
Objective:
Use advanced filters and CLI

Automate capture and extract metrics

Create technical reports

Topics:
TShark basics

Display filters vs Capture filters

Extract fields

Export packets, generate graphs

Activities:
Capture with TShark:

bash
Copy
Edit
tshark -i wlan0mon -Y "wlan.fc.type == 2 && wlan.fc.retry == 1" -T fields -e frame.time -e wlan.sa -e wlan.ra -e wlan.fc.retry
Session Timing:

Use Wireshark: View > Time Display Format > Seconds Since Previous

Measure roaming delay

Graph Retries & Signal:

Statistics > I/O Graphs

Graph wlan.fc.retry vs radiotap.dbm_antsignal

Report Building:

Export display to CSV

Summarize: Total packets, retries, handshake status

Practice Scenarios:
Automate capture for 10 minutes and extract retry stats

Analyze STAs roaming behavior between three APs

Generate report showing packet loss and QoS analysis

Deliverables Each Week:
Screenshots of Wireshark filters and frame dissections

PCAPs with labeled frame types

Short reports on findings (1–2 pages)

Tools Needed:
Wireshark (latest)

TShark

Linux with compatible NIC

Test SSID with open/WPA2/802.1X

Optional: 2+ APs for roaming

Sample Output Example – Beacon Frame:
Filter:

wireshark
Copy
Edit
wlan.fc.type_subtype == 8
Fields:

SSID: TestLab

BSSID: 00:11:22:33:44:55

Capabilities: ESS, Privacy

Supported Rates: 6, 12, 24 Mbps

TIM: DTIM Count 1, DTIM Period 2

Explanation: This beacon frame shows a protected ESS with DTIM period used for power-save buffering. Good for confirming AP config.

Let me know if you'd like this turned into a printable PDF or Notion page, or need specific captures/templates.











Tools



